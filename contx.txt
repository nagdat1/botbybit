# ملف التوقيع الكامل لمنصة Bybit (API Signing) — دليل عملي

> المستند هذا يشرح جميع الخطوات والمواصفات اللازمة **لإنشاء توقيع صالح** لطلبات API على منصة **Bybit** بدون تضمين أي مفاتيح سرية. صُمّم ليُستخدم كمرجع جاهز يمكنك نسخه أو طباعته.

---

## 1. مقدمة

هذا الملف يشرح بشكل كامل **كيفية توقيع طلبات API** إلى Bybit (إنشاء قيمة `sign` أو `X-BAPI-SIGN` وغيرها من الحقول المطلوبة) لكي تتم المصادقة بشكل صحيح على الطلبات الخاصة بك.

**ملاحظة أمنية:** لا تُشارك مفتاح الـ API أو الـ Secret مع أي شخص. لا تخزن المفاتيح في مستودع عام.

---

## 2. متطلبات أساسية

* مفتاح API (API Key) من حساب Bybit.
* المفتاح السري (API Secret) المرتبط بالمفتاح.
* معرفة بنوع الطلب (GET أو POST) ومسار الـ endpoint.
* توقيت (Timestamp) متزامن مع خادم Bybit.
* استقبال/إرسال رؤوس HTTP المطلوبة.

---

## 3. رؤوس المصادقة (HTTP headers) الشائعة

عند إرسال طلب مُوقّع، عادة ما تحتاج لإضافة هذه الرؤوس (أسماء الرؤوس قد تختلف بحسب نسخة الـ API):

* `X-BAPI-API-KEY` : مفتاح الـ API الخاص بك.
* `X-BAPI-TIMESTAMP` : الطابع الزمني (timestamp) بالمللي ثانية أو بصيغة المطابقة لمتطلبات Bybit.
* `X-BAPI-RECV-WINDOW` : (اختياري) نافذة الاستقبال بالمللي ثانية (مثل 5000) لتحديد سماحية الفرق الزمني.
* `X-BAPI-SIGN` : قيمة التوقيع (الحاصل من تطبيق HMAC-SHA256 أو الخوارزمية المطلوبة).

> ملاحظة: بعض نسخ الـ API تستخدم أسماء رؤوس مختلفة أو تضم الحقول داخل جسم الطلب (`sign` كحقل ضمن body). توخّ الحذر وتحقق من endpoint الذي تستخدمه.

---

## 4. الخوارزمية العامة للتوقيع (مبدأ العمل)

1. **اجمع القيم المطلوبة** لإنشاء سلسلة نصية موحدة (canonical string). هذه القيم عادةً تشمل: `timestamp` + `api_key` + `recv_window` + (محتوى الطلب — إما `queryString` أو `jsonBodyString`).
2. **رتّب المعاملات** (query params) بشكل تصاعدي حسب الاسم إذا كان هناك `queryString`.
3. **إنشئ السلسلة النهائية** concatenation كما تحدد Bybit للـ endpoint الذي تستخدمه.
4. **طبّق HMAC-SHA256** على هذه السلسلة باستخدام `API Secret` كمفتاح.
5. **حوّل الناتج إلى تمثيل سداسي عشري (hex lowercase)** واستخدمه كقيمة التوقيع.

---

## 5. تفاصيل حسب نوع الطلب

### GET requests

* السلسلة المرجعية عادة تكون:
  `timestamp + api_key + recv_window + queryString`

* حيث `queryString` هي جملة الاستعلام (parameters) مفصولة بعلامة `&` ومعاملات مرتبة أبجديًا.

### POST requests (JSON body)

* السلسلة المرجعية عادة تكون:
  `timestamp + api_key + recv_window + jsonBodyString`

* حيث `jsonBodyString` هي جسم الـ JSON كما سيتم إرساله (محتفظًا بترتيب المفاتيح حسب مواصفة API إن طُلب ذلك).

> **تنبيه:** بعض واجهات Bybit الأحدث (مثل V5) قد تستخدم قواعد مختلفة أو إضافة حقول أخرى. تحقق من endpoint المحدد إن أمكن.

---

## 6. مثال توضيحي (سلسلة التوقيع — ليس كود قابل للتنفيذ)

**مكونات افتراضية:**

* timestamp = `1690000000000`
* api_key = `MY_API_KEY`
* recv_window = `5000`
* queryString = `symbol=BTCUSDT&side=Buy&qty=0.001`

**السلسلة المجمعة:**

```
1690000000000MY_API_KEY5000symbol=BTCUSDT&side=Buy&qty=0.001
```

**طريقة التوقيع:**

* خذ السلسلة أعلاه وطبّق HMAC-SHA256 باستخدام `API Secret` كمفتاح.
* الناتج يُحوّل إلى نص سداسي عشري (hex) ويُصبح قيمة التوقيع.

---

## 7. ملاحظات عن التوقيت (Timestamp) و recv_window

* **الـ timestamp** عادةً بالمللي ثانية. تأكد من أن ساعة الخادم/حاوية التشغيل متزامنة (NTP) لتفادي رفض الطلبات بسبب فرق التوقيت.
* `recv_window` يحدد نطاق السماحية بين توقيتك وتوقيت الخادم (مثلاً 5000ms = 5s). عدّلها حسب الحاجة.
* Bybit قد يرفض الطلب إذا كان الاختلاف الزمني أكبر من نافذة السماحية.

---

## 8. كيفية الاختبار بدون مفاتيح حقيقية

يمكنك استخدام بيئة الاختبار (Testnet) الخاصة بـ Bybit وعمل مفاتيح اختبارية عليها لاختبار آلية توقيع الطلبات قبل استخدام مفاتيح الحساب الحقيقي.

---

## 9. استخدام الملف مع Postman (إعداد متكرر بدون كود)

1. أضف متغيرات بيئة في Postman: `API_KEY`, `API_SECRET`, `TIMESTAMP`, `RECV_WINDOW`.
2. في تبويب "Pre-request Script" ضع تعليمات لحساب `TIMESTAMP` تلقائيًا (Postman يدعم توليد الوقت). ثم أنشئ السلسلة النصية نفسها (concatenation) واحسب توقيع HMAC-SHA256 بواسطة وظيفة JavaScript داخل Pre-request Script.
3. قم بإضافة رؤوس الطلب كما هو موضح في القسم 3، وضع قيمة التوقيع الناتجة في `X-BAPI-SIGN` أو الحقل المعيّن.

> ملاحظة: هذا الشرح لا يحتوي على كود قابل للتنفيذ داخل المستند، لكنه يوضح الخطوات التي يجب تنفيذها داخل أدوات مثل Postman.

---

## 10. تحذيرات وأفضل الممارسات

* لا تحتفظ بالمفاتيح في مستودعات عامة.
* استعمل متغيرات بيئة مع تشفير إن أمكن على الخوادم.
* حدّ من صلاحيات الـ API Key (تاكد أن المفتاح لا يمتلك صلاحيات غير مطلوبة).
* سجّل الأحداث فقط بالمعلومات الضرورية — لا تسجل المفاتيح السرية أو قيم الـ sign في السجلات.
* جرّب على Testnet قبل Mainnet.

---

## 11. ماذا يحتوي "الملف الكامل" هنا؟

هذا المستند يحتوي على:

* تعليمات مفصّلة لبناء سلسلة التوقيع لكل من GET و POST.
* أسماء الرؤوس المطلوبة وإرشادات التوقيت.
* مثال توضيحي لسلسلة التوقيع (بدون مفاتيح).
* خطوات لاختبار التوقيع في Postman وتحذيرات أمنية.

إذا رغبت، أستطيع الآن:

* A) **تحويل هذا المستند إلى ملف PDF** جاهز للتحميل.
* B) **تصديره إلى ملف Word (.docx)** قابل للتعديل.
* C) **أرفق إعداد Postman (JSON environment/collection)** مُهيأ (مع تعليمات) — *ملاحظة: لن يحتوي على مفاتيح حقيقية*.

اختر أحد الخيارات A أو B أو C وسأجهّز الملف فورًا.

---

*تنبيه نهائي:* أنصح دائماً بمراجعة التوثيق الرسمي لمنصة Bybit قبل النشر أو الاعتماد النهائي على أي آلية توقيع، لأن تفاصيل النسخ والتغييرات قد تتغير بمرور الوقت.

---

## 12. ملاحظة مهمة حول **مفاتيح API المنشأة من خلال النظام**

* عند إنشاء مفتاح API عبر نظام Bybit، يستخدم نظام Bybit خوارزمية **HMAC** لتوقيع الطلبات.
* ستحصل على **زوج من المفاتيح**: **مفتاح عام (API Key)** و**مفتاح خاص (API Secret)**.
* **عامل هذين المفتاحين ككلمات مرور**: لا تشاركهما مع أي جهة، وخزنهما في مكان آمن (مثل مدير كلمات مرور موثوق أو متغيرات بيئة مشفرة على الخادم).
* لا تُدرج المفتاح السري في مستودعات الشيفرة العامة أو في لقطات الشاشة.
* عند الحاجة لاختبار التوقيع، استخدم مفاتيح Testnet المخصصة لذلك.

**نصائح عملية:**

1. فعّل قيود الـ IP لمفاتيح API إذا كان ذلك متاحًا لتقليل مخاطر الوصول غير المصرّح به.
2. امنح كل مفتاح أدنى الصلاحيات المطلوبة فقط (مبدأ أقل الامتيازات — least privilege).
3. دوّر المفاتيح بانتظام (غيرها دوريًا) وازِل أي مفاتيح لم تعد تستخدمها.
4. سجّل محاولات الاستخدام المشبوهة وفعّل تنبيهات الأمان إن أمكن.

---

## 13. شرح مفصّل لكل الأدوات والخيارات المتاحة عبر API — (الرافعة، الرصيد، أنواع الأوامر، والمزيد)

في هذا القسم سنغطي **كل ما يتعلق بالأدوات والخيارات** التي قد تحتاجها عند التعامل مع منصة Bybit عبر الـ API. الشرح نظري وعملي (بدون كود) حتى تتمكن من إعداد ملفات التوقيع والإعدادات بأمان.

### 13.1 حساب الرصيد (Wallet / Account Balance)

* **المحافظ (Wallets):** لدى Bybit محافظ متعددة (مثل Spot, USDT Perp, Coin Perp, Unified Margin)؛ كل محفظة تحتفظ بأرصدة مستقلة.
* **حالة الرصيد:** تَعرض endpoints الرصيد المتاح (`available_balance`) والرصيد الإجمالي (`total_balance`) والرصيد المُعلّق (locked) المستخدم للأوامر/الهامش.
* **التحويل الداخلي (Internal Transfer):** يمكنك نقل أموال بين محافظك عبر endpoint خاص بالتحويلات (Transfer). تتطلب عادة توقيعًا وتحديد `from_account`, `to_account`, `coin`, و `amount`.

### 13.2 الرافعة المالية (Leverage)

* **أنواع الرافعة:** Bybit يدعم رافعة للـ Perpetual Contracts وقد تُمكّن للـ Isolated أو Cross Margin.
* **تغيير الرافعة عبر API:** يوجد endpoint لتعديل الرافعة (`position/leverage/save` أو ما يعادلها في نسخة الـ API المستخدمة). عند تنفيذ تغيير الرافعة تأكد من: 1) لا توجد أوامر مفتوحة تتعارض، 2) الحد الأدنى والحد الأقصى المدعومين للرمز.
* **تأثير الرافعة:** زيادة الرافعة تزيد من مخاطرك وتقلل من هامش الإعدام (liquidation). تحقق من متطلبات الهامش قبل التغيير.

### 13.3 أوضاع الهامش (Margin Modes)

* **Isolated Margin:** الهامش مرتبط بمركز معين؛ الخسارة لا تؤثر على باقي الحساب.
* **Cross Margin (Unified):** الهامش مشترك بين المراكز داخل نفس المحفظة؛ مخاطرة أكبر لكنها قد تمنع التصفية السريعة.
* **تغيير النمط عبر API:** يوجد endpoints لتبديل بين isolated و cross لبعض الرموز.

### 13.4 أنواع الأوامر (Order Types) وخيارات التنفيذ

* **Market Order:** تنفيذ بسعر السوق الفوري.
* **Limit Order:** تحديد سعر محدد، قد لا ينفي التنفيذ الفوري.
* **Conditional Orders / Stop Orders:** أوامر تنفّذ عند وصول السعر إلى شرط معين (stop loss / take profit).
* **Post-Only:** تضمن أن يكون الأمر صانع سوق (maker) وإلا يُلغى.
* **Reduce-Only:** يضمن أن الأمر يقلّل من حجم المركز ولا يفتحه.
* **Time In Force (TIF):** خيارات مثل GoodTillCancel (GTC), ImmediateOrCancel (IOC), FillOrKill (FOK).
* **كيف يؤثر ذلك على التوقيع:** بعض الحقول الخاصة بهذه الخيارات يجب أن تُدرج في `queryString` أو `jsonBodyString` لتوليد التوقيع الصحيح.

### 13.5 المراكز (Positions) وإدارتها

* **حجم المركز (Position Size):** يعبر عنه بوحدات العقد (contracts) أو بوحدة العملة (مثال: USDT).
* **سعر الدخول المتوسط (Entry Price) والربح/الخسارة (PNL):** هذه الحقول تُرجعها endpoints المخصصة للمراكز.
* **إغلاق المركز (Close Position):** يمكنك إغلاق مركز عبر أمر بسعر السوق أو أمر شرطي.

### 13.6 العمولة والتمويل (Fees & Funding)

* **عمولات maker/taker:** تختلف حسب الزوج وتحددها Bybit. تحقق من endpoint أو صفحة الرسوم للحصول على القيم.
* **تمويل الفترات (Funding Rate):** للعقود الدائمة، تتحمّل أو تكسب وفقاً لسعر التمويل عند فترات محددة؛ هناك endpoint لمعرفة الـ funding rate والتاريخ.

### 13.7 إدارة الأمان (Security) والقيود

* **قيود الـ IP:** قُم بتقييد مفاتيح API على نطاقات IP إذا أمكن.
* **صلاحيات المفاتيح (Permissions):** كل مفتاح يمكن تقييده لصلاحيات معينة: قراءة فقط، تداول، سحب (عادة يُنصح بعدم تفعيل السحب عبر الـ API إلا عند الضرورة المطلقة).
* **معدل الاستدعاء (Rate Limits):** Bybit تفرض حدوداً للـ rate — تأكد من الاطّلاع على سياسة الـ rate limits لتجنّب الحظر مؤقتاً.

### 13.8 أوامر الإيقاف (Stop Loss & Take Profit)

* **Stop Loss:** أمر مشروط يُفعل عند وصول السعر إلى حد خسارة معين.
* **Take Profit:** يأخذ الربح عند مستوى معين.
* **هاتان الخاصيتان قد تُدمجان في نفس الأمر** في بعض نسخ الـ API (oco-like orders أو conditional attachments).

### 13.9 تحويل العملات والسحب (Withdrawals)

* **سحب الأموال عبر API:** عادة ما يتطلب صلاحية خاصة وغالباً يحتاج إجراءات أمان إضافية (2FA، قيود IP، white-list للعناوين).
* **الرسوم والحدود:** تختلف الرسوم والحد الأدنى للسحب حسب العملة.

### 13.10 أوامر متقدمة وأدوات إضافية

* **Trailing Stop Orders:** يتابع السعر ويحرك مستوى الـ stop تلقائياً.
* **Reduce-Only & Close-On-Trigger:** خيارات متاحة لضمان سلوك الأمر عند التنفيذ.
* **Position Mode (One-way vs Hedge):** بعض المنصات تدعم Hedge Mode (مراكز طويلة وقصيرة منفصلة)، تحقق مما يدعمه Bybit في إصدار API الذي تستخدمه.

### 13.11 نقاط عملية عند إعداد ملفات التوقيع والـ API

1. **تضمين جميع الحقول الضرورية** في السلسلة المراد توقيعها (حتى الحقول الاختيارية التي سيعتمد عليها الخادم عند التحقق).
2. **ترتيب المعاملات** أبجديًا عند استعمال queryString لتجنب أخطاء التوقيع.
3. **التأكد من التوقيت**: استخدم `NTP` لمزامنة وقت الخادم، وضع recv_window كقيمة مناسبة (مثلاً 5000).
4. **اختبار على Testnet** وجمع الاستجابات (responses) للتحقق من بنية السلاسل قبل الانتقال للـ Mainnet.

### 13.12 مراجع سريعة للـ Endpoints الشائعة

* Endpoints لحساب الرصيد: `wallet/balance` أو ما يماثلها في نسخة الـ API.
* Endpoints للأوامر: `order/create`, `order/cancel`, `order/query`.
* Endpoints للمراكز: `position/list`, `position/change-leverage`.
* Endpoints للتحويل: `wallet/transfer`.

> **ملاحظة:** أسماء الـ endpoints قد تختلف بين V2, V3, V5 من Bybit — دائماً تحقق من التوثيق الرسمي للنسخة التي تعمل بها.

---

## 14. أمثلة استخدام عملية (بدون كود) — حالات شائعة

* **حالة 1 — تغيير الرافعة قبل فتح صفقة كبيرة:** تحقق من عدم وجود أوامر معلقة، احسب تأثير التغيير على متطلبات الهامش، ثم استخدم endpoint تغيير الرافعة، وبعد التحقق قم بإرسال أمر Limit/Market.
* **حالة 2 — فتح صفقة مع Stop Loss وTake Profit:** جهّز جسم الطلب ليحتوي على الحقول الخاصة بالـ stop و tp إن كانت مدعومة، وضمّنها في سلسلة التوقيع.
* **حالة 3 — مراقبة التمويل (Funding):** استعلم عن funding rate بانتظام وقرّر تعديل المراكز أو إدارج أوامر حماية إذا كانت الفروقات كبيرة.

---

## 15. هل تريد أن أُدرج تفاصيل أكثر؟

أستطيع الآن:

* إضافة **قائمة endpoints تفصيلية** مع أسماء الحقول لكل endpoint (ملف مرجعي داخل المستند).
* أو **إرفاق قالب Postman** يحتوي على هذه النماذج (بدون مفاتيح) جاهز للاختبار.
* أو **تحويل المستند كاملاً إلى PDF/Word**.

اختر أي خيار من الثلاثة (أو اطلب الدمج) وسأكمله فوراً.
 إليك الإضافة النهائية:

16. قائمة Endpoints تفصيلية (مرجع سريع)
16.1 الحساب والمحافظ (Wallet / Account)
Endpoint	الوظيفة	الحقول الرئيسية
/v2/private/wallet/balance	استعلام الرصيد	coin, available_balance, total_balance, locked_balance
/v2/private/wallet/transfer	تحويل داخلي بين المحافظ	from_account, to_account, coin, amount, timestamp
16.2 المراكز (Positions)
Endpoint	الوظيفة	الحقول الرئيسية
/v2/private/position/list	استعلام جميع المراكز المفتوحة	symbol, size, side, entry_price, unrealised_pnl
/v2/private/position/change-leverage	تعديل الرافعة المالية	symbol, leverage, timestamp
16.3 الأوامر (Orders)
Endpoint	الوظيفة	الحقول الرئيسية
/v2/private/order/create	إنشاء أمر جديد	symbol, side, order_type, qty, price, time_in_force, stop_loss, take_profit
/v2/private/order/cancel	إلغاء أمر	order_id, symbol, timestamp
/v2/private/order/query	استعلام أمر محدد	order_id, symbol
16.4 التمويل والرسوم (Funding & Fees)
Endpoint	الوظيفة	الحقول الرئيسية
/v2/public/funding/prev-funding-rate	التمويل السابق	symbol, funding_rate, funding_time
/v2/public/symbols	معرفة العمولة	maker_fee_rate, taker_fee_rate, min_order_qty
16.5 إدارة الأمان (Security)
Endpoint	الوظيفة	الحقول الرئيسية
/v2/private/api-key/list	قائمة مفاتيح API	api_key, permissions, ip_restriction
/v2/private/api-key/create	إنشاء مفتاح API	key_name, permissions, ip_whitelist
17. نصائح عملية للـ API

ترتيب الحقول عند توليد التوقيع: دائماً أبجديًا.

توقيت الخادم: استخدم NTP لتجنب رفض الطلبات بسبب اختلاف الوقت.

اختبار أولًا على Testnet قبل استخدام Mainnet.

تسجيل الأحداث: دون القيم الحساسة مثل الـ API Secret.

الحد الأدنى من الصلاحيات: لا تمنح أي مفتاح صلاحيات غير مطلوبة.

مراقبة الاستخدام: استعمل القيود حسب IP والتنبيهات عند النشاط المشبوه.

18. ملاحظات ختامية

المستند الحالي يغطي: المفاتيح، التوقيع، الرصيد، المراكز، الأوامر، الرافعة، التحويلات، التمويل، الرسوم، الأمان، ونماذج Endpoints.

يمكن استخدامه كمرجع كامل قبل إعداد أي بوت أو تطبيق يستخدم Bybit API.

دائمًا تحقق من التوثيق الرسمي للنسخة التي تعمل عليها لضمان التوافق.