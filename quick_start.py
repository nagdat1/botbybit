#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ุจุฏุก ุณุฑูุน ููุจูุช ุงูุฐูู
ููุชุดุบูู ุงูุณุฑูุน ูุงูุงุฎุชุจุงุฑ
"""

import asyncio
import logging
import sys
import os

# ุฅุถุงูุฉ ุงููุณุงุฑ ุงูุญุงูู
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู ุงููุจุณุท
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def print_welcome():
    """ุทุจุงุนุฉ ุฑุณุงูุฉ ุงูุชุฑุญูุจ"""
    welcome = """
โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
โ                                                              โ
โ           ๐ ุงูุจูุช ุงูุฐูู ููุชุฏุงูู ุนูู Bybit ๐                โ
โ                                                              โ
โ  โจ ุงูุจุฏุก ุงูุณุฑูุน:                                            โ
โ  1. ุชุฃูุฏ ูู ุชุญุฏูุซ config.py ุจููุงุชูุญู                        โ
โ  2. ุดุบู ุงูุจูุช: python run_smart_bot.py                      โ
โ  3. ุงุจุฏุฃ ุจู /start ูู ุงูุชููุฌุฑุงู                              โ
โ  4. ุงุฑุจุท ููุงุชูุญ API ุจุงุณุชุฎุฏุงู ุฒุฑ "๐ ุงูุฑุจุท"                  โ
โ                                                              โ
โ  ๐ง ููุงุฎุชุจุงุฑ: python test_smart_bot.py                       โ
โ  ๐ ููุชูุซูู: README_SMART_BOT.md                             โ
โ                                                              โ
โโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโโ
    """
    print(welcome)

def check_config():
    """ูุญุต ุงูุฅุนุฏุงุฏุงุช"""
    try:
        from config import TELEGRAM_TOKEN, ADMIN_USER_ID
        
        if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == "your_telegram_token_here":
            logger.error("โ ูุฑุฌู ุชุญุฏูุซ TELEGRAM_TOKEN ูู config.py")
            return False
        
        if not ADMIN_USER_ID or ADMIN_USER_ID == 0:
            logger.error("โ ูุฑุฌู ุชุญุฏูุซ ADMIN_USER_ID ูู config.py")
            return False
        
        logger.info("โ ุงูุฅุนุฏุงุฏุงุช ุตุญูุญุฉ")
        return True
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ูุญุต ุงูุฅุนุฏุงุฏุงุช: {e}")
        return False

async def quick_test():
    """ุงุฎุชุจุงุฑ ุณุฑูุน ููููููุงุช ุงูุฃุณุงุณูุฉ"""
    try:
        logger.info("๐ ุงุฎุชุจุงุฑ ุณุฑูุน ููููููุงุช...")
        
        # ุงุฎุชุจุงุฑ ูุงุนุฏุฉ ุงูุจูุงูุงุช
        from database import db_manager
        db_manager.init_database()
        logger.info("โ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุฌุงูุฒุฉ")
        
        # ุงุฎุชุจุงุฑ ูุฏูุฑ ุงููุณุชุฎุฏููู
        from user_manager import user_manager
        user_env = user_manager.get_user_environment(99999)
        logger.info("โ ูุฏูุฑ ุงููุณุชุฎุฏููู ุฌุงูุฒ")
        
        # ุงุฎุชุจุงุฑ ูุฏูุฑ API
        from api_manager import api_manager
        logger.info("โ ูุฏูุฑ API ุฌุงูุฒ")
        
        # ุงุฎุชุจุงุฑ ูุฏูุฑ ุงูุตููุงุช
        from order_manager import order_manager
        logger.info("โ ูุฏูุฑ ุงูุตููุงุช ุฌุงูุฒ")
        
        # ุงุฎุชุจุงุฑ ูุฏูุฑ ุงููุงุฌูุฉ
        from ui_manager import ui_manager
        logger.info("โ ูุฏูุฑ ุงููุงุฌูุฉ ุฌุงูุฒ")
        
        # ุงุฎุชุจุงุฑ ูุฏูุฑ ุงูุฃูุงู
        from security_manager import security_manager
        logger.info("โ ูุฏูุฑ ุงูุฃูุงู ุฌุงูุฒ")
        
        # ุงุฎุชุจุงุฑ ุชุญูู ุงูุจูุช
        from bot_controller import bot_controller
        logger.info("โ ุชุญูู ุงูุจูุช ุฌุงูุฒ")
        
        logger.info("๐ ุฌููุน ุงูููููุงุช ุฌุงูุฒุฉ!")
        return True
        
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ ุงูุณุฑูุน: {e}")
        return False

def show_usage():
    """ุนุฑุถ ููููุฉ ุงูุงุณุชุฎุฏุงู"""
    usage = """
๐ฑ ููููุฉ ุงุณุชุฎุฏุงู ุงูุจูุช:

1. ๐ ุงูุฑุจุท:
   - ุงุถุบุท ุนูู "๐ ุงูุฑุจุท"
   - ุฃุฏุฎู ููุงุชูุญ API: API_KEY API_SECRET

2. โ๏ธ ุงูุฅุนุฏุงุฏุงุช:
   - ุงุถุบุท ุนูู "โ๏ธ ุงูุฅุนุฏุงุฏุงุช"
   - ุงุฎุชุฑ ุงูุฅุนุฏุงุฏุงุช ุงููุทููุจุฉ

3. ๐ฐ ุงูุชุฏุงูู:
   - /buy BTCUSDT 0.001
   - /sell ETHUSDT 0.1
   - /balance

4. ๐ ุฅุฏุงุฑุฉ ุงูุตููุงุช:
   - ุงุถุบุท ุนูู "๐ ุงูุตููุงุช ุงูููุชูุญุฉ"
   - ุงุฎุชุฑ ุงูุตููุฉ ูุฅุฏุงุฑุชูุง
   - ุฃุถู TP/SL ุฃู ุฃุบูู ุฌุฒุฆูุงู

5. ๐ ุงููุชุงุจุนุฉ:
   - ุงุถุบุท ุนูู "๐ ุชุงุฑูุฎ ุงูุชุฏุงูู"
   - ุงุถุบุท ุนูู "๐ ุงูุฅุญุตุงุฆูุงุช"

๐ง ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:
โข /start - ุจุฏุก ุงูุจูุช
โข /balance - ุนุฑุถ ุงูุฑุตูุฏ
โข /buy SYMBOL QUANTITY - ุดุฑุงุก
โข /sell SYMBOL QUANTITY - ุจูุน
โข /help - ุงููุณุงุนุฏุฉ

๐ก๏ธ ุงูุญูุงูุฉ:
โข ูู ูุณุชุฎุฏู ูู ุจูุฆุฉ ูููุตูุฉ
โข ูุง ูููู ุงููุตูู ูุจูุงูุงุช ุงูุขุฎุฑูู
โข ูุธุงู ุญูุงูุฉ ูู ุงูุฃูุดุทุฉ ุงููุดุจููุฉ
โข ูุฑุงูุจุฉ ุชููุงุฆูุฉ ููุตููุงุช
    """
    print(usage)

async def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    try:
        print_welcome()
        
        # ูุญุต ุงูุฅุนุฏุงุฏุงุช
        if not check_config():
            logger.error("โ ูุฑุฌู ุฅุตูุงุญ ุงูุฅุนุฏุงุฏุงุช ุฃููุงู")
            return
        
        # ุงุฎุชุจุงุฑ ุณุฑูุน
        if await quick_test():
            logger.info("๐ ุงูุจูุช ุฌุงูุฒ ููุชุดุบูู!")
            show_usage()
            
            # ุณุคุงู ุงููุณุชุฎุฏู
            choice = input("\nูู ุชุฑูุฏ ุชุดุบูู ุงูุจูุช ุงูุขูุ (y/n): ").lower().strip()
            
            if choice in ['y', 'yes', 'ูุนู', 'ู']:
                logger.info("๐ ุจุฏุก ุชุดุบูู ุงูุจูุช...")
                
                # ุชุดุบูู ุงูุจูุช ุงูุฐูู
                from smart_trading_bot import smart_bot
                await smart_bot.start()
            else:
                logger.info("๐ ููููู ุชุดุบูู ุงูุจูุช ูุงุญูุงู ุจุงุณุชุฎุฏุงู: python run_smart_bot.py")
        else:
            logger.error("โ ูุฑุฌู ุฅุตูุงุญ ุงูุฃุฎุทุงุก ุฃููุงู")
            
    except KeyboardInterrupt:
        logger.info("โน๏ธ ุชู ุฅููุงู ุงูุจูุช ุจูุงุณุทุฉ ุงููุณุชุฎุฏู")
    except Exception as e:
        logger.error(f"โ ุฎุทุฃ ูู ุงูุชุดุบูู: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
