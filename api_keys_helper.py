#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ูุณุงุนุฏ ุฅุถุงูุฉ ููุงุชูุญ API ูู Bybit
"""

import logging
from real_account_manager import real_account_manager

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)

def add_api_keys(user_id: int, api_key: str, api_secret: str) -> bool:
    """ุฅุถุงูุฉ ููุงุชูุญ API ูููุณุชุฎุฏู"""
    
    try:
        print(f"ุฅุถุงูุฉ ููุงุชูุญ API ูููุณุชุฎุฏู {user_id}...")
        
        # ุงูุชุญูู ูู ุตุญุฉ ุงูููุงุชูุญ
        if not api_key or not api_secret:
            print("โ ููุงุชูุญ API ูุงุฑุบุฉ!")
            return False
        
        if len(api_key) < 10 or len(api_secret) < 10:
            print("โ ููุงุชูุญ API ูุตูุฑุฉ ุฌุฏุงู!")
            return False
        
        # ุชููุฆุฉ ุงูุญุณุงุจ
        real_account_manager.initialize_account(user_id, 'bybit', api_key, api_secret)
        account = real_account_manager.get_account(user_id)
        
        if not account:
            print("โ ูุดู ูู ุชููุฆุฉ ุงูุญุณุงุจ!")
            return False
        
        print("โ ุชู ุฅุถุงูุฉ ููุงุชูุญ API ุจูุฌุงุญ!")
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุฅุถุงูุฉ ููุงุชูุญ API: {e}")
        return False

def test_api_keys(user_id: int) -> bool:
    """ุงุฎุชุจุงุฑ ููุงุชูุญ API"""
    
    try:
        print(f"ุงุฎุชุจุงุฑ ููุงุชูุญ API ูููุณุชุฎุฏู {user_id}...")
        
        account = real_account_manager.get_account(user_id)
        
        if not account:
            print("โ ูุง ููุฌุฏ ุญุณุงุจ ููุนูู!")
            return False
        
        # ุงุฎุชุจุงุฑ ุฌูุจ ุงูุฑุตูุฏ
        print("ุงุฎุชุจุงุฑ ุฌูุจ ุงูุฑุตูุฏ...")
        balance = account.get_wallet_balance('futures')
        
        if balance:
            print("โ ููุงุชูุญ API ุตุญูุญุฉ!")
            
            # ุนุฑุถ ุงูุฑุตูุฏ ุฅุฐุง ูุงู ูุชููุฑุงู
            if 'coins' in balance and 'USDT' in balance['coins']:
                usdt_balance = balance['coins']['USDT'].get('equity', 0)
                print(f"๐ฐ ุงูุฑุตูุฏ ุงููุชุงุญ: {usdt_balance} USDT")
            
            return True
        else:
            print("โ ููุงุชูุญ API ุบูุฑ ุตุญูุญุฉ!")
            return False
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ููุงุชูุญ API: {e}")
        return False

def test_leverage_setting(user_id: int) -> bool:
    """ุงุฎุชุจุงุฑ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ"""
    
    try:
        print("ุงุฎุชุจุงุฑ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ...")
        
        account = real_account_manager.get_account(user_id)
        
        if not account:
            print("โ ูุง ููุฌุฏ ุญุณุงุจ ููุนูู!")
            return False
        
        # ุงุฎุชุจุงุฑ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ
        result = account.set_leverage('linear', 'BTCUSDT', 1)
        
        if result:
            print("โ ุชู ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ ุจูุฌุงุญ!")
            return True
        else:
            print("โ ูุดู ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ!")
            return False
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุฑุงูุนุฉ ุงููุงููุฉ: {e}")
        return False

def test_order_placement(user_id: int) -> bool:
    """ุงุฎุชุจุงุฑ ูุถุน ุฃูุฑ"""
    
    try:
        print("ุงุฎุชุจุงุฑ ูุถุน ุฃูุฑ...")
        
        account = real_account_manager.get_account(user_id)
        
        if not account:
            print("โ ูุง ููุฌุฏ ุญุณุงุจ ููุนูู!")
            return False
        
        # ุงุฎุชุจุงุฑ ูุถุน ุฃูุฑ ุตุบูุฑ
        result = account.place_order(
            category='linear',
            symbol='BTCUSDT',
            side='Buy',
            order_type='Market',
            qty=0.001,  # ูููุฉ ุตุบูุฑุฉ ููุงุฎุชุจุงุฑ
            leverage=1
        )
        
        if result and result.get('success'):
            print("โ ุชู ูุถุน ุงูุฃูุฑ ุจูุฌุงุญ!")
            print(f"Order ID: {result.get('order_id')}")
            return True
        else:
            print("โ ูุดู ูุถุน ุงูุฃูุฑ!")
            if result:
                print(f"ุชูุงุตูู ุงูุฎุทุฃ: {result}")
            return False
            
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ูุถุน ุงูุฃูุฑ: {e}")
        return False

def interactive_setup():
    """ุฅุนุฏุงุฏ ุชูุงุนูู ูููุงุชูุญ API"""
    
    print("ุฅุนุฏุงุฏ ููุงุชูุญ API ูู Bybit")
    print("=" * 40)
    
    # ุงูุญุตูู ุนูู ูุนุฑู ุงููุณุชุฎุฏู
    try:
        user_id = int(input("ุฃุฏุฎู ูุนุฑู ุงููุณุชุฎุฏู (ุฑูู): "))
    except ValueError:
        print("โ ูุนุฑู ุงููุณุชุฎุฏู ูุฌุจ ุฃู ูููู ุฑููุงู!")
        return False
    
    # ุงูุญุตูู ุนูู ููุชุงุญ API
    api_key = input("ุฃุฏุฎู ููุชุงุญ API: ").strip()
    if not api_key:
        print("โ ููุชุงุญ API ูุงุฑุบ!")
        return False
    
    # ุงูุญุตูู ุนูู ุงูููุชุงุญ ุงูุณุฑู
    api_secret = input("ุฃุฏุฎู ุงูููุชุงุญ ุงูุณุฑู: ").strip()
    if not api_secret:
        print("โ ุงูููุชุงุญ ุงูุณุฑู ูุงุฑุบ!")
        return False
    
    print(f"\nุฅุถุงูุฉ ููุงุชูุญ API ูููุณุชุฎุฏู {user_id}...")
    
    # ุฅุถุงูุฉ ุงูููุงุชูุญ
    if not add_api_keys(user_id, api_key, api_secret):
        return False
    
    # ุงุฎุชุจุงุฑ ุงูููุงุชูุญ
    print("\nุงุฎุชุจุงุฑ ููุงุชูุญ API...")
    if not test_api_keys(user_id):
        return False
    
    # ุงุฎุชุจุงุฑ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ
    print("\nุงุฎุชุจุงุฑ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ...")
    if not test_leverage_setting(user_id):
        return False
    
    # ุงุฎุชุจุงุฑ ูุถุน ุงูุฃูุฑ
    print("\nุงุฎุชุจุงุฑ ูุถุน ุงูุฃูุฑ...")
    if not test_order_placement(user_id):
        return False
    
    print("\n๐ ุชู ุฅุนุฏุงุฏ ููุงุชูุญ API ุจูุฌุงุญ!")
    print("ุงููุธุงู ุฌุงูุฒ ููุงุณุชุฎุฏุงู!")
    
    return True

def quick_test():
    """ุงุฎุชุจุงุฑ ุณุฑูุน ูููุธุงู"""
    
    print("ุงุฎุชุจุงุฑ ุณุฑูุน ูููุธุงู")
    print("=" * 30)
    
    user_id = 1  # ูุนุฑู ุงููุณุชุฎุฏู ุงูุงูุชุฑุงุถู
    
    # ุงุฎุชุจุงุฑ ุงูููุงุชูุญ ุงูููุฌูุฏุฉ
    if test_api_keys(user_id):
        print("โ ููุงุชูุญ API ุชุนูู ุจุดูู ุตุญูุญ!")
        
        # ุงุฎุชุจุงุฑ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ
        if test_leverage_setting(user_id):
            print("โ ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ ูุนูู!")
        else:
            print("โ ูุดููุฉ ูู ุชุนุฏูู ุงูุฑุงูุนุฉ ุงููุงููุฉ")
        
        # ุงุฎุชุจุงุฑ ูุถุน ุงูุฃูุฑ
        if test_order_placement(user_id):
            print("โ ูุถุน ุงูุฃูุฑ ูุนูู!")
        else:
            print("โ ูุดููุฉ ูู ูุถุน ุงูุฃูุฑ")
        
        return True
    else:
        print("โ ููุงุชูุญ API ุบูุฑ ุตุญูุญุฉ ุฃู ููููุฏุฉ!")
        print("ูุฑุฌู ุฅุถุงูุฉ ููุงุชูุญ API ุตุญูุญุฉ")
        return False

if __name__ == "__main__":
    print("ูุณุงุนุฏ ููุงุชูุญ API ูู Bybit")
    print("=" * 40)
    
    print("ุงุฎุชุฑ ุงูุฎูุงุฑ:")
    print("1. ุฅุนุฏุงุฏ ููุงุชูุญ API ุฌุฏูุฏุฉ")
    print("2. ุงุฎุชุจุงุฑ ููุงุชูุญ API ุงูููุฌูุฏุฉ")
    
    try:
        choice = input("ุฃุฏุฎู ุฑูู ุงูุฎูุงุฑ (1 ุฃู 2): ").strip()
        
        if choice == "1":
            interactive_setup()
        elif choice == "2":
            quick_test()
        else:
            print("โ ุฎูุงุฑ ุบูุฑ ุตุญูุญ!")
            
    except KeyboardInterrupt:
        print("\nุชู ุฅูุบุงุก ุงูุนูููุฉ")
    except Exception as e:
        print(f"โ ุฎุทุฃ: {e}")
